SET FOREIGN_KEY_CHECKS = 0;
DROP TABLE IF EXISTS `heroku_abe9b3ee88756b6`.products;
DROP TABLE IF EXISTS `heroku_abe9b3ee88756b6`.users;
DROP TABLE IF EXISTS `heroku_abe9b3ee88756b6`.carts;
DROP TABLE IF EXISTS `heroku_abe9b3ee88756b6`.cartitems;
DROP TABLE IF EXISTS `heroku_abe9b3ee88756b6`.orders;
DROP TABLE IF EXISTS `heroku_abe9b3ee88756b6`.orderitems;
SET FOREIGN_KEY_CHECKS = 1;

CREATE TABLE IF NOT EXISTS `heroku_abe9b3ee88756b6`.users (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT,
	email VARCHAR(45) NOT NULL,
    `password` VARCHAR(255) NOT NULL,
    resetToken VARCHAR(255),
    resetTokenExpiration TIMESTAMP,
	PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS `heroku_abe9b3ee88756b6`.products (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT,
	title VARCHAR(45) NOT NULL,
	price DOUBLE NULL,
	`description` TEXT NULL,
	imageUrl VARCHAR(255) NULL,
	userId INT UNSIGNED NOT NULL,
	PRIMARY KEY (id),
	FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS `heroku_abe9b3ee88756b6`.carts (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    userId INT UNSIGNED NOT NULL,
    PRIMARY KEY(id),
    FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS `heroku_abe9b3ee88756b6`.cartitems (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    quantity INT UNSIGNED NOT NULL,
	productId INT UNSIGNED NOT NULL,
    cartId INT UNSIGNED NOT NULL,
    PRIMARY KEY(id),
    FOREIGN KEY (productId) REFERENCES products(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (cartId) REFERENCES carts(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS `heroku_abe9b3ee88756b6`.orders (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    userId INT UNSIGNED NOT NULL,
    PRIMARY KEY(id),
    FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS `heroku_abe9b3ee88756b6`.orderitems (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    quantity INT UNSIGNED NOT NULL,
	productId INT UNSIGNED NOT NULL,
    orderId INT UNSIGNED NOT NULL,
    PRIMARY KEY(id),
    FOREIGN KEY (productId) REFERENCES products(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (orderId) REFERENCES orders(id) ON DELETE CASCADE ON UPDATE CASCADE
);